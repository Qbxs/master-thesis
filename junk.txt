# Old latex code. May or may not be used again.


\section{Type classes as predicates over types}

Type classes can be seen as a form of \emph{qualified types}, i.e. types that qualify for certain properties.
E.g. we can say that for a type $\tau$ to fall under the \texttt{Show} type class means that $\tau$ is a showable type.
In this case, it means every term $t : \tau$ has some property $\phi$ that is characteristic for $\Phi$.

In this section we want to give a way to reason about predicates over types and how they can be related in the context of subtyping.
We therefore restrict ourselves to monotonous predicates, i.e. predicates that only refer to the witnesses of types, opposed to e.g. predicates about the number of witnesses of a type.

Using set-theoretic reasoning, we can motivate rules to reason about type classes by how properties are propagated through various type operators and the subtyping relationship.
$\Phi(\tau)$ holds iff for every witness of $\tau$ some characteristic property $\phi$ of $\Phi$ holds.
($\Phi$ can stand for a type class, $\phi$ for a class method.)

\begin{definition}
  A \emph{predicate over types} $\Phi$ is specified by a set of properties $\phi_i$.
  For a type $\tau$ the application $\Phi(\tau)$ holds if and only if $\phi$ holds for every member of $\tau$.
\end{definition}

Our syntax looks as follows:

\begin{flalign*}
  \tau := & \; \texttt{Nat} \; | \; \texttt{Int} \; | \; \dots                         & \textit{Simple types} \\
          & \; \top \; | \; \bot \; | \; \tau \meet \tau \; | \; \tau \join \tau & \textit{Lattice types} \\
  \Phi := & \; \texttt{Read} \; | \; \texttt{Eq} \; | \; \texttt{Show} \; | \; \dots  & \textit{Type classes} \\
  \Xi  := & \; \Phi(\tau) \; | \;  \Xi \Rightarrow \Phi(\tau) & \textit{Constraints}
\end{flalign*}

Let context $\Gamma = \{ \Xi_1, \dots, \Xi_n \}$ be a set of constraints (propositions).

The central rule motivated by Liskov substitution:
If some property holds for $\sigma$ and $\tau \sub \sigma$,
If $\Phi$ is a property for $\sigma$ and $\tau \sub \sigma$, then it should also be a property $\tau$.
Since all witnesses of $\tau$ are also witnesses of $\sigma$, the property $\Phi$ is propagated to $\tau$.

  \begin{prooftree}
    \alwaysNoLine
    \AxiomC{$\ctx \Phi(\sigma)$}
    \AxiomC{$\tau \sub \sigma$}
    \alwaysSingleLine
    \RightLabel{\textsc{Sub}}
    \BinaryInfC{$\ctx \Phi(\tau)$}
  \end{prooftree}

  If $\Phi$ is a property for both $\tau$ and $\sigma$, then it should also be a property of their union or join $\tau \join \sigma$.
  Since all witnesses of $\tau \join \sigma$ are witnesses of $\sigma$ or $\tau$, the property $\Phi$ holds for all witnesses of $\tau \join \sigma$.

  \begin{prooftree}
    \alwaysNoLine
    \AxiomC{$\ctx \Phi(\sigma)$}
    \AxiomC{$\ctx \Phi(\tau)$}
    \alwaysSingleLine
    \joinRule
    \BinaryInfC{$\ctx \Phi(\tau\join\sigma)$}
  \end{prooftree}

  If we know $\Phi$ for both $\tau$ and $\sigma$, the characteristic predicate also holds for all terms that are witnesses of both $\tau$ and $\sigma$, i.e. $\tau\meet\sigma$.
  This rule is \emph{admissable} because with $\tau \sub \tau \meet \sigma$ and $\sigma \sub \tau \meet \sigma$ given by the subtyping rules we can derive the result using the \textsc{Sub}-rule.
 
  \begin{prooftree}
    \alwaysNoLine
    \AxiomC{$\ctx \Phi(\tau)$}
    \alwaysSingleLine
    \meetRule
    \UnaryInfC{$\ctx \Phi(\tau\meet\sigma)$}
  \end{prooftree}

  \begin{prooftree}
    \alwaysNoLine
    \AxiomC{$\ctx \Phi(\sigma)$}
    \alwaysSingleLine
    \meetRule
    \UnaryInfC{$\ctx \Phi(\tau\meet\sigma)$}
  \end{prooftree}

  If $\Phi$ depends on $\Psi$, then for every $\tau$ with $\Phi(\tau)$ we also obtain $\Psi(\tau)$.
  For every witness of $\tau$, the characteristic property $\psi$ holds and because of $\Phi(\tau) \Rightarrow \Psi(\tau)$ we have $\psi$ implies $\phi$, $\phi$ holds for every witness of $\tau$ as well.

  \begin{prooftree}
    \AxiomC{$\ctx \Psi(\tau)$}
    \AxiomC{$\ctx \Phi(\tau) \Rightarrow \Psi(\tau)$}
    \RightLabel{\textsc{Impl}}
    \BinaryInfC{$\Gamma \vdash \Phi(\tau)$}
  \end{prooftree}

  We can also introduce elimination rules for unions.
  These are also \emph{admissable} since for any $\tau$ and $\sigma$ we have with the subtyping rules $\tau \sub \tau \join \sigma$ and $\sigma \sub \tau \join \sigma$ and can then derive this rule from \textsc{Sub}.

  \begin{prooftree}
    \alwaysNoLine
    \AxiomC{$\ctx \Phi(\tau\join\sigma)$}
    \alwaysSingleLine
    \joinRule
    \UnaryInfC{$\ctx \Phi(\tau)$}
  \end{prooftree}

  \begin{prooftree}
    \alwaysNoLine
    \AxiomC{$\ctx \Phi(\tau\join\sigma)$}
    \alwaysSingleLine
    \joinRule
    \UnaryInfC{$\ctx \Phi(\sigma)$}
  \end{prooftree}

  Axioms:
  \begin{prooftree}
    \AxiomC{}
    \RightLabel{\textsc{Axiom}}
    \UnaryInfC{$\Gamma, \Phi(\tau) \vdash \Phi(\tau)$}
  \end{prooftree}

  Every property holds for all witnesses of $\bot$ because there are none, so every predicate trivially holds for $\bot$.

  \begin{prooftree}
    \AxiomC{}
    \botRule
    \UnaryInfC{$\ctx \Phi(\bot)$}
  \end{prooftree}

  If we know $\Phi(\top)$, then with the \textsc{Sub}-rule we can infer $\Phi(\tau)$ for any type $\tau$.

  \begin{prooftree}
    \AxiomC{$\ctx \Phi(\top)$}
    \RightLabel{\textsc{Top}}
    \UnaryInfC{$\ctx \Phi(\tau)$}
  \end{prooftree}

  % TODO mention \Gamma in rules and use definition of predicates

\section{Instance Resolution}
% single param type classes

With the Curry-Howard isomorphism we can interpret propositions as types and terms as proofs accordingly.
Extending this notion we can interpret type classes as predicates over types.
E.g. \texttt{Eq} $\sigma$ would mean that the predicate (or property) of equality holds for type $\sigma$.
We can provide a proof for this iff we can resolve an instance of \texttt{Eq} $\sigma$ as a witness.

Here, we build upon the rules for qualified types to construct resolution rules for type classes.
Our language differentiates between co- and contravariant type classes because they behave differently in the context of subtyping.
Co- and contravariant type classes restrict the occurence of the bound type variable in the methods.

An example for a covariant type class is the \texttt{Read} type class in which the type to be shown only occurs in a covariant position.
In the \texttt{Read} type class the type variable only occurs in a contravariant position. 

\begin{flalign*}
  \tau := & \; \texttt{Nat} \; | \; \texttt{Int} \; | \; \dots                         & \textit{Simple types} \\
          & \; \top \; | \; \bot \; | \; \tau \meet \tau \; | \; \tau \join \tau & \textit{Lattice types} \\
  \Phi := & \; \texttt{Read} \; | \; \texttt{Eq} \; | \; \texttt{Show} \; | \; \dots  & \textit{Type classes}
\end{flalign*}

Notation:
\begin{itemize}
  \item $\Gamma$: Context of known instances.
  \item $\Phi^+$: Covariant type class $\Phi$
  \item $\Phi^-$: Contravariant type class $\Phi$
  \item Rules annotated with * constrain the argument types to be equal, e.g. if we can infer $\texttt{Eq}(\tau\join\sigma)$, both arguments of the class method \texttt{Eq} have to be either of type $\tau$ or $\sigma$. 
\end{itemize}

Deriving instances:

  \begin{prooftree}
    \alwaysNoLine
    \AxiomC{$\ctx \Phi^+(\sigma)$}
    \AxiomC{$\tau \sub \sigma$}
    \alwaysSingleLine
    \subPosRule
    \BinaryInfC{$\ctx \Phi^+(\tau)$}
  \end{prooftree}

  \begin{prooftree}
    \alwaysNoLine
    \AxiomC{$\ctx \Phi^-(\sigma)$}
    \AxiomC{$\sigma \sub \tau$}
    \alwaysSingleLine
    \subNegRule
    \BinaryInfC{$\ctx \Phi^-(\tau)$}
  \end{prooftree}

  Admissable rules:

  Unclear yet, how this behaves for co-/contravariant type classes. Definetly problematic for \texttt{Eq}.
  \begin{prooftree}
    \alwaysNoLine
    \AxiomC{$\ctx \Phi^-(\sigma)$}
    \AxiomC{$\ctx \Phi^-(\tau)$}
    \alwaysSingleLine
    \joinRule
    \BinaryInfC{$\ctx \Phi^-(\tau\join\sigma)$}
  \end{prooftree}

  This seems trivial, because we already have \textsc{Sub}.
  Additionally, given type class coherence the meet would always be $\bot$. So we do not gain anything from this rule.
  \begin{prooftree}
    \alwaysNoLine
    \AxiomC{$\ctx \Phi^+(\sigma)$}
    \AxiomC{$\ctx \Phi^+(\tau)$}
    \alwaysSingleLine
    \meetRule
    \BinaryInfC{$\ctx \Phi^+(\tau\meet\sigma)$}
  \end{prooftree}

  Axioms:
  \begin{prooftree}
    \AxiomC{}
    \axiomPos
    \UnaryInfC{$\Gamma, \Phi^+(\tau) \vdash \Phi^+(\tau)$}
  \end{prooftree}

  \begin{prooftree}
    \AxiomC{}
    \axiomNeg
    \UnaryInfC{$\Gamma, \Phi^-(\tau) \vdash \Phi^-(\tau)$}
  \end{prooftree}

  This seems trivial again:

  \begin{prooftree}
    \AxiomC{}
    \botRule
    \UnaryInfC{$\Gamma \vdash \Phi^+(\bot)$}
  \end{prooftree}

  This seems very questionable (but does not entail obviously wrong things with \textsc{Sub}$^-$):

  \begin{prooftree}
    \AxiomC{}
    \topRule
    \UnaryInfC{$\Gamma \vdash \Phi^-(\top)$}
  \end{prooftree}

  Probably should not be a rule:
  \begin{prooftree}
    \alwaysNoLine
    \AxiomC{\texttt{instance }$\Phi(\tau)$}
    \alwaysSingleLine
    \instanceDeclRule
    \UnaryInfC{$\Phi(\tau) \vdash$}
  \end{prooftree}